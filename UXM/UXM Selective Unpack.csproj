<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <OutputType>Exe</OutputType>
    <RootNamespace>UXM</RootNamespace>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <!--<UseWindowsForms>true</UseWindowsForms>
    <UseWPF>true</UseWPF>-->
    <RuntimeIdentifiers>osx-arm64;osx-x64</RuntimeIdentifiers>
    <ImportWindowsDesktopTargets>true</ImportWindowsDesktopTargets>
    <Configurations>Release;Debug</Configurations>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <Optimize>false</Optimize>
    <CreatePackage>false</CreatePackage>
    <UseSGen>false</UseSGen>
  </PropertyGroup>
  <PropertyGroup>
    <ApplicationIcon>icon.ico</ApplicationIcon>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <CreatePackage>false</CreatePackage>
    <UseSGen>false</UseSGen>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('Windows'))">
    <DefineConstants>OS_WINDOWS</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('Linux'))">
    <DefineConstants>OS_LINUX</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('FreeBSD'))">
    <DefineConstants>OS_FREEBSD</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('OSX'))">
    <DefineConstants>OS_MAC</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <Content Include="..\README.md" />
    <Content Include="res\DarkSouls2Dictionary.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\DarkSouls2GameInfo.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\DarkSouls3Dictionary.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\DarkSouls3GameInfo.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\DarkSoulsDictionary.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\DarkSoulsGameInfo.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\ArmoredCore6Dictionary.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\EldenRingDictionary.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\ArmoredCore6GameInfo.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\EldenRingGameInfo.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\ScholarDictionary.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\ScholarGameInfo.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\SekiroBonusDictionary.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\SekiroDictionary.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\SekiroBonusGameInfo.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="res\SekiroGameInfo.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <!--<Content Include="FodyWeavers.xml" />-->
    <Content Include="icon.ico" />
    <Content Include="path-to-oodle">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\SoulsFormats\SoulsFormats\SoulsFormats.csproj" />
    <ProjectReference Include="..\Yabber-Class-Library\Yabber\Yabber.csproj" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="Microsoft.WindowsAPICodePack-Core" Version="1.1.0.0" />
    <PackageReference Include="Microsoft.WindowsAPICodePack-Shell" Version="1.1.0.0" />
    <PackageReference Include="Octokit" Version="0.32.0" />
    <PackageReference Include="Semver" Version="2.0.4" />
    <PackageReference Include="System.Data.DataSetExtensions" Version="4.5.0" />
    <PackageReference Include="System.Resources.Extensions" Version="9.0.0" />
    <PackageReference Include="BouncyCastle.Cryptography" Version="2.4.0" />
    <PackageReference Include="System.Configuration.ConfigurationManager" Version="9.0.2" />
    <PackageReference Include="Eto.Forms" Version="2.9.0" />
    <PackageReference Include="Eto.Serialization.Xaml" Version="2.9.0" />
    <PackageReference Include="Eto.Platform.macOS" Version="2.9.0" />
    <PackageReference Include="Eto.Platform.Mac64" Version="2.9.0" />
    <PackageReference Include="Eto.Platform.Gtk" Version="2.9.0" />
  </ItemGroup>
  <Target Name="PostBuildMacros">
    <GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
      <Output TaskParameter="Assemblies" ItemName="Targets" />
    </GetAssemblyIdentity>
    <ItemGroup>
      <VersionNumber Include="@(Targets-&gt;'%(Version)')" />
    </ItemGroup>
  </Target>
<!--  <PropertyGroup>
    <PostBuildEventDependsOn>
      $(PostBuildEventDependsOn);
      PostBuildMacros;
    </PostBuildEventDependsOn>
    <PostBuildEvent>set "output=$(TargetDir)UXM Selective Unpack @(VersionNumber)"
if "$(ConfigurationName)" == "Release" (
  md "%25output%25"
  del "%25output%25"
  xcopy "$(ProjectDir)res\*.*" "%25output%25/res" /Y /I /E
  copy "$(SolutionDir)\README.md" "%25output%25\" 
  ren "%25output%25\README.md" "README.txt"  
  copy "$(TargetPath)" "%25output%25\"
  copy "$(TargetPath).config" "%25output%25\"
  copy "$(TargetDir)$(TargetName).pdb" "%25output%25\"
)</PostBuildEvent>
  </PropertyGroup>-->
</Project>